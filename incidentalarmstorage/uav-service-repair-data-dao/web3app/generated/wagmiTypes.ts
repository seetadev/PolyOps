// Generated by @wagmi/cli@0.1.5 on 2/22/2023 at 5:21:05 PM
import {
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import { WriteContractMode, PrepareWriteContractResult } from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// erc20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20ABI = [
  {
    type: 'event',
    inputs: [
      { name: 'owner', type: 'address', indexed: true },
      { name: 'spender', type: 'address', indexed: true },
      { name: 'value', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    inputs: [
      { name: 'from', type: 'address', indexed: true },
      { name: 'to', type: 'address', indexed: true },
      { name: 'value', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', type: 'address' },
      { name: 'spender', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', type: 'address' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', type: 'address' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', type: 'address' },
      { name: 'recipient', type: 'address' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Basic_SPN_Factory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const basicSpnFactoryABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'metadataURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'cid', internalType: 'string', type: 'string' },
    ],
    name: 'safeMint',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'userBurn',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SPN_Factory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spnFactoryABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Paused',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Unpaused',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'baseURI', internalType: 'string', type: 'string' },
      { name: 'registry', internalType: 'address', type: 'address' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'metadataURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'pause',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'cid', internalType: 'string', type: 'string' },
      { name: 'symkey', internalType: 'string', type: 'string' },
    ],
    name: 'safeMint',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'unpause',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'userBurn',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Ownable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ownableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ITablelandController
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iTablelandControllerABI = [
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'caller', internalType: 'address', type: 'address' }],
    name: 'getPolicy',
    outputs: [
      {
        name: '',
        internalType: 'struct ITablelandController.Policy',
        type: 'tuple',
        components: [
          { name: 'allowInsert', internalType: 'bool', type: 'bool' },
          { name: 'allowUpdate', internalType: 'bool', type: 'bool' },
          { name: 'allowDelete', internalType: 'bool', type: 'bool' },
          { name: 'whereClause', internalType: 'string', type: 'string' },
          { name: 'withCheck', internalType: 'string', type: 'string' },
          {
            name: 'updatableColumns',
            internalType: 'string[]',
            type: 'string[]',
          },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ITablelandTables
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iTablelandTablesABI = [
  {
    type: 'error',
    inputs: [
      { name: 'querySize', internalType: 'uint256', type: 'uint256' },
      { name: 'maxQuerySize', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'MaxQuerySizeExceeded',
  },
  { type: 'error', inputs: [], name: 'Unauthorized' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'tableId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'statement',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'CreateTable',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      { name: 'isOwner', internalType: 'bool', type: 'bool', indexed: false },
      {
        name: 'tableId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'statement',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'policy',
        internalType: 'struct ITablelandController.Policy',
        type: 'tuple',
        components: [
          { name: 'allowInsert', internalType: 'bool', type: 'bool' },
          { name: 'allowUpdate', internalType: 'bool', type: 'bool' },
          { name: 'allowDelete', internalType: 'bool', type: 'bool' },
          { name: 'whereClause', internalType: 'string', type: 'string' },
          { name: 'withCheck', internalType: 'string', type: 'string' },
          {
            name: 'updatableColumns',
            internalType: 'string[]',
            type: 'string[]',
          },
        ],
        indexed: false,
      },
    ],
    name: 'RunSQL',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'tableId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'controller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SetController',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'from',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      { name: 'to', internalType: 'address', type: 'address', indexed: false },
      {
        name: 'tableId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TransferTable',
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'statement', internalType: 'string', type: 'string' },
    ],
    name: 'createTable',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tableId', internalType: 'uint256', type: 'uint256' }],
    name: 'getController',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'caller', internalType: 'address', type: 'address' },
      { name: 'tableId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'lockController',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'pause',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'caller', internalType: 'address', type: 'address' },
      { name: 'tableId', internalType: 'uint256', type: 'uint256' },
      { name: 'statement', internalType: 'string', type: 'string' },
    ],
    name: 'runSQL',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'baseURI', internalType: 'string', type: 'string' }],
    name: 'setBaseURI',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'caller', internalType: 'address', type: 'address' },
      { name: 'tableId', internalType: 'uint256', type: 'uint256' },
      { name: 'controller', internalType: 'address', type: 'address' },
    ],
    name: 'setController',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'unpause',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// OwnableUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ownableUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1822ProxiableUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1822ProxiableUpgradeableABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PausableUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const pausableUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Paused',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Unpaused',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ContextUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const contextUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ReentrancyGuardUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const reentrancyGuardUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: '_approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721ABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'name_', internalType: 'string', type: 'string' },
      { name: 'symbol_', internalType: 'string', type: 'string' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721Receiver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721ReceiverABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC165
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc165ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC165
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc165ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC1967UpgradeUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc1967UpgradeUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IBeaconUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iBeaconUpgradeableABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'implementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Initializable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const initializableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// UUPSUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const uupsUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721UpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721ReceiverUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721ReceiverUpgradeableABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721UpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: '_approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC165Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc165UpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC165Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc165UpgradeableABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721Burnable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721BurnableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721URIStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721UriStorageABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721Metadata
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721MetadataABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: '_approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721BurnableUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721BurnableUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721URIStorageUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721UriStorageUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721MetadataUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721MetadataUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: '_approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721HolderUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721HolderUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc20ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Read<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: erc20ABI, ...config } as UseContractReadConfig<
    typeof erc20ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20Allowance(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'allowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'allowance'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20BalanceOf(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'balanceOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'balanceOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20Decimals(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'decimals'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'decimals'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"name"`.
 */
export function useErc20Name(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'name'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'name'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20Symbol(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'symbol'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'symbol'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20TotalSupply(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'totalSupply'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'totalSupply'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Write<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc20ABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, TFunctionName>({
    abi: erc20ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'approve'>({
    abi: erc20ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20Transfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'transfer'>({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'transferFrom'>({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function usePrepareErc20Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link basicSpnFactoryABI}__.
 */
export function useBasicSpnFactory(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: basicSpnFactoryABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basicSpnFactoryABI}__.
 */
export function useBasicSpnFactoryRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof basicSpnFactoryABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: basicSpnFactoryABI,
    ...config,
  } as UseContractReadConfig<typeof basicSpnFactoryABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basicSpnFactoryABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useBasicSpnFactoryBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof basicSpnFactoryABI, 'balanceOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: basicSpnFactoryABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof basicSpnFactoryABI, 'balanceOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basicSpnFactoryABI}__ and `functionName` set to `"getApproved"`.
 */
export function useBasicSpnFactoryGetApproved(
  config: Omit<
    UseContractReadConfig<typeof basicSpnFactoryABI, 'getApproved'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: basicSpnFactoryABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof basicSpnFactoryABI, 'getApproved'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basicSpnFactoryABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useBasicSpnFactoryIsApprovedForAll(
  config: Omit<
    UseContractReadConfig<typeof basicSpnFactoryABI, 'isApprovedForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: basicSpnFactoryABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof basicSpnFactoryABI, 'isApprovedForAll'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basicSpnFactoryABI}__ and `functionName` set to `"metadataURI"`.
 */
export function useBasicSpnFactoryMetadataUri(
  config: Omit<
    UseContractReadConfig<typeof basicSpnFactoryABI, 'metadataURI'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: basicSpnFactoryABI,
    functionName: 'metadataURI',
    ...config,
  } as UseContractReadConfig<typeof basicSpnFactoryABI, 'metadataURI'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basicSpnFactoryABI}__ and `functionName` set to `"name"`.
 */
export function useBasicSpnFactoryName(
  config: Omit<
    UseContractReadConfig<typeof basicSpnFactoryABI, 'name'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: basicSpnFactoryABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof basicSpnFactoryABI, 'name'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basicSpnFactoryABI}__ and `functionName` set to `"owner"`.
 */
export function useBasicSpnFactoryOwner(
  config: Omit<
    UseContractReadConfig<typeof basicSpnFactoryABI, 'owner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: basicSpnFactoryABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof basicSpnFactoryABI, 'owner'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basicSpnFactoryABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useBasicSpnFactoryOwnerOf(
  config: Omit<
    UseContractReadConfig<typeof basicSpnFactoryABI, 'ownerOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: basicSpnFactoryABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof basicSpnFactoryABI, 'ownerOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basicSpnFactoryABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useBasicSpnFactorySupportsInterface(
  config: Omit<
    UseContractReadConfig<typeof basicSpnFactoryABI, 'supportsInterface'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: basicSpnFactoryABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof basicSpnFactoryABI, 'supportsInterface'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basicSpnFactoryABI}__ and `functionName` set to `"symbol"`.
 */
export function useBasicSpnFactorySymbol(
  config: Omit<
    UseContractReadConfig<typeof basicSpnFactoryABI, 'symbol'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: basicSpnFactoryABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof basicSpnFactoryABI, 'symbol'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basicSpnFactoryABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useBasicSpnFactoryTokenUri(
  config: Omit<
    UseContractReadConfig<typeof basicSpnFactoryABI, 'tokenURI'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: basicSpnFactoryABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof basicSpnFactoryABI, 'tokenURI'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link basicSpnFactoryABI}__.
 */
export function useBasicSpnFactoryWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof basicSpnFactoryABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof basicSpnFactoryABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof basicSpnFactoryABI, TFunctionName>({
    abi: basicSpnFactoryABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link basicSpnFactoryABI}__ and `functionName` set to `"approve"`.
 */
export function useBasicSpnFactoryApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof basicSpnFactoryABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof basicSpnFactoryABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof basicSpnFactoryABI, 'approve'>({
    abi: basicSpnFactoryABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link basicSpnFactoryABI}__ and `functionName` set to `"burn"`.
 */
export function useBasicSpnFactoryBurn<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof basicSpnFactoryABI, 'burn'>['abi'],
        'burn'
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<TMode, typeof basicSpnFactoryABI, 'burn'> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof basicSpnFactoryABI, 'burn'>({
    abi: basicSpnFactoryABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link basicSpnFactoryABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useBasicSpnFactoryRenounceOwnership<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof basicSpnFactoryABI,
          'renounceOwnership'
        >['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        TMode,
        typeof basicSpnFactoryABI,
        'renounceOwnership'
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof basicSpnFactoryABI,
    'renounceOwnership'
  >({
    abi: basicSpnFactoryABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link basicSpnFactoryABI}__ and `functionName` set to `"safeMint"`.
 */
export function useBasicSpnFactorySafeMint<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof basicSpnFactoryABI,
          'safeMint'
        >['abi'],
        'safeMint'
      > & { functionName?: 'safeMint' }
    : UseContractWriteConfig<TMode, typeof basicSpnFactoryABI, 'safeMint'> & {
        abi?: never
        functionName?: 'safeMint'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof basicSpnFactoryABI, 'safeMint'>({
    abi: basicSpnFactoryABI,
    functionName: 'safeMint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link basicSpnFactoryABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useBasicSpnFactorySafeTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof basicSpnFactoryABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof basicSpnFactoryABI,
        'safeTransferFrom'
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof basicSpnFactoryABI, 'safeTransferFrom'>(
    {
      abi: basicSpnFactoryABI,
      functionName: 'safeTransferFrom',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link basicSpnFactoryABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useBasicSpnFactorySetApprovalForAll<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof basicSpnFactoryABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        TMode,
        typeof basicSpnFactoryABI,
        'setApprovalForAll'
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof basicSpnFactoryABI,
    'setApprovalForAll'
  >({
    abi: basicSpnFactoryABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link basicSpnFactoryABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useBasicSpnFactoryTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof basicSpnFactoryABI,
          'transferFrom'
        >['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof basicSpnFactoryABI,
        'transferFrom'
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof basicSpnFactoryABI, 'transferFrom'>({
    abi: basicSpnFactoryABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link basicSpnFactoryABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useBasicSpnFactoryTransferOwnership<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof basicSpnFactoryABI,
          'transferOwnership'
        >['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        TMode,
        typeof basicSpnFactoryABI,
        'transferOwnership'
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof basicSpnFactoryABI,
    'transferOwnership'
  >({
    abi: basicSpnFactoryABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link basicSpnFactoryABI}__ and `functionName` set to `"userBurn"`.
 */
export function useBasicSpnFactoryUserBurn<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof basicSpnFactoryABI,
          'userBurn'
        >['abi'],
        'userBurn'
      > & { functionName?: 'userBurn' }
    : UseContractWriteConfig<TMode, typeof basicSpnFactoryABI, 'userBurn'> & {
        abi?: never
        functionName?: 'userBurn'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof basicSpnFactoryABI, 'userBurn'>({
    abi: basicSpnFactoryABI,
    functionName: 'userBurn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link basicSpnFactoryABI}__.
 */
export function usePrepareBasicSpnFactoryWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof basicSpnFactoryABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: basicSpnFactoryABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof basicSpnFactoryABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link basicSpnFactoryABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareBasicSpnFactoryApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof basicSpnFactoryABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: basicSpnFactoryABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof basicSpnFactoryABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link basicSpnFactoryABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareBasicSpnFactoryBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof basicSpnFactoryABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: basicSpnFactoryABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof basicSpnFactoryABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link basicSpnFactoryABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareBasicSpnFactoryRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof basicSpnFactoryABI,
      'renounceOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: basicSpnFactoryABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof basicSpnFactoryABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link basicSpnFactoryABI}__ and `functionName` set to `"safeMint"`.
 */
export function usePrepareBasicSpnFactorySafeMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof basicSpnFactoryABI, 'safeMint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: basicSpnFactoryABI,
    functionName: 'safeMint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof basicSpnFactoryABI, 'safeMint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link basicSpnFactoryABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareBasicSpnFactorySafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof basicSpnFactoryABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: basicSpnFactoryABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof basicSpnFactoryABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link basicSpnFactoryABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareBasicSpnFactorySetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof basicSpnFactoryABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: basicSpnFactoryABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof basicSpnFactoryABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link basicSpnFactoryABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareBasicSpnFactoryTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof basicSpnFactoryABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: basicSpnFactoryABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof basicSpnFactoryABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link basicSpnFactoryABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareBasicSpnFactoryTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof basicSpnFactoryABI,
      'transferOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: basicSpnFactoryABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof basicSpnFactoryABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link basicSpnFactoryABI}__ and `functionName` set to `"userBurn"`.
 */
export function usePrepareBasicSpnFactoryUserBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof basicSpnFactoryABI, 'userBurn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: basicSpnFactoryABI,
    functionName: 'userBurn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof basicSpnFactoryABI, 'userBurn'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link basicSpnFactoryABI}__.
 */
export function useBasicSpnFactoryEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof basicSpnFactoryABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: basicSpnFactoryABI,
    ...config,
  } as UseContractEventConfig<typeof basicSpnFactoryABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link basicSpnFactoryABI}__ and `eventName` set to `"Approval"`.
 */
export function useBasicSpnFactoryApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof basicSpnFactoryABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: basicSpnFactoryABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof basicSpnFactoryABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link basicSpnFactoryABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useBasicSpnFactoryApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof basicSpnFactoryABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: basicSpnFactoryABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof basicSpnFactoryABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link basicSpnFactoryABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useBasicSpnFactoryOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof basicSpnFactoryABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: basicSpnFactoryABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<
    typeof basicSpnFactoryABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link basicSpnFactoryABI}__ and `eventName` set to `"Transfer"`.
 */
export function useBasicSpnFactoryTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof basicSpnFactoryABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: basicSpnFactoryABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof basicSpnFactoryABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link spnFactoryABI}__.
 */
export function useSpnFactory(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: spnFactoryABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link spnFactoryABI}__.
 */
export function useSpnFactoryRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof spnFactoryABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: spnFactoryABI,
    ...config,
  } as UseContractReadConfig<typeof spnFactoryABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link spnFactoryABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useSpnFactoryBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof spnFactoryABI, 'balanceOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: spnFactoryABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof spnFactoryABI, 'balanceOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link spnFactoryABI}__ and `functionName` set to `"getApproved"`.
 */
export function useSpnFactoryGetApproved(
  config: Omit<
    UseContractReadConfig<typeof spnFactoryABI, 'getApproved'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: spnFactoryABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof spnFactoryABI, 'getApproved'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link spnFactoryABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useSpnFactoryIsApprovedForAll(
  config: Omit<
    UseContractReadConfig<typeof spnFactoryABI, 'isApprovedForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: spnFactoryABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof spnFactoryABI, 'isApprovedForAll'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link spnFactoryABI}__ and `functionName` set to `"metadataURI"`.
 */
export function useSpnFactoryMetadataUri(
  config: Omit<
    UseContractReadConfig<typeof spnFactoryABI, 'metadataURI'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: spnFactoryABI,
    functionName: 'metadataURI',
    ...config,
  } as UseContractReadConfig<typeof spnFactoryABI, 'metadataURI'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link spnFactoryABI}__ and `functionName` set to `"name"`.
 */
export function useSpnFactoryName(
  config: Omit<
    UseContractReadConfig<typeof spnFactoryABI, 'name'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: spnFactoryABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof spnFactoryABI, 'name'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link spnFactoryABI}__ and `functionName` set to `"owner"`.
 */
export function useSpnFactoryOwner(
  config: Omit<
    UseContractReadConfig<typeof spnFactoryABI, 'owner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: spnFactoryABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof spnFactoryABI, 'owner'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link spnFactoryABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useSpnFactoryOwnerOf(
  config: Omit<
    UseContractReadConfig<typeof spnFactoryABI, 'ownerOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: spnFactoryABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof spnFactoryABI, 'ownerOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link spnFactoryABI}__ and `functionName` set to `"paused"`.
 */
export function useSpnFactoryPaused(
  config: Omit<
    UseContractReadConfig<typeof spnFactoryABI, 'paused'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: spnFactoryABI,
    functionName: 'paused',
    ...config,
  } as UseContractReadConfig<typeof spnFactoryABI, 'paused'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link spnFactoryABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useSpnFactoryProxiableUuid(
  config: Omit<
    UseContractReadConfig<typeof spnFactoryABI, 'proxiableUUID'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: spnFactoryABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<typeof spnFactoryABI, 'proxiableUUID'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link spnFactoryABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useSpnFactorySupportsInterface(
  config: Omit<
    UseContractReadConfig<typeof spnFactoryABI, 'supportsInterface'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: spnFactoryABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof spnFactoryABI, 'supportsInterface'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link spnFactoryABI}__ and `functionName` set to `"symbol"`.
 */
export function useSpnFactorySymbol(
  config: Omit<
    UseContractReadConfig<typeof spnFactoryABI, 'symbol'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: spnFactoryABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof spnFactoryABI, 'symbol'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link spnFactoryABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useSpnFactoryTokenUri(
  config: Omit<
    UseContractReadConfig<typeof spnFactoryABI, 'tokenURI'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: spnFactoryABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof spnFactoryABI, 'tokenURI'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link spnFactoryABI}__.
 */
export function useSpnFactoryWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof spnFactoryABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof spnFactoryABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof spnFactoryABI, TFunctionName>({
    abi: spnFactoryABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link spnFactoryABI}__ and `functionName` set to `"approve"`.
 */
export function useSpnFactoryApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof spnFactoryABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof spnFactoryABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof spnFactoryABI, 'approve'>({
    abi: spnFactoryABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link spnFactoryABI}__ and `functionName` set to `"burn"`.
 */
export function useSpnFactoryBurn<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof spnFactoryABI, 'burn'>['abi'],
        'burn'
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<TMode, typeof spnFactoryABI, 'burn'> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof spnFactoryABI, 'burn'>({
    abi: spnFactoryABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link spnFactoryABI}__ and `functionName` set to `"initialize"`.
 */
export function useSpnFactoryInitialize<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof spnFactoryABI, 'initialize'>['abi'],
        'initialize'
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<TMode, typeof spnFactoryABI, 'initialize'> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof spnFactoryABI, 'initialize'>({
    abi: spnFactoryABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link spnFactoryABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function useSpnFactoryOnErc721Received<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof spnFactoryABI,
          'onERC721Received'
        >['abi'],
        'onERC721Received'
      > & { functionName?: 'onERC721Received' }
    : UseContractWriteConfig<
        TMode,
        typeof spnFactoryABI,
        'onERC721Received'
      > & {
        abi?: never
        functionName?: 'onERC721Received'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof spnFactoryABI, 'onERC721Received'>({
    abi: spnFactoryABI,
    functionName: 'onERC721Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link spnFactoryABI}__ and `functionName` set to `"pause"`.
 */
export function useSpnFactoryPause<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof spnFactoryABI, 'pause'>['abi'],
        'pause'
      > & { functionName?: 'pause' }
    : UseContractWriteConfig<TMode, typeof spnFactoryABI, 'pause'> & {
        abi?: never
        functionName?: 'pause'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof spnFactoryABI, 'pause'>({
    abi: spnFactoryABI,
    functionName: 'pause',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link spnFactoryABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useSpnFactoryRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof spnFactoryABI,
          'renounceOwnership'
        >['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        TMode,
        typeof spnFactoryABI,
        'renounceOwnership'
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof spnFactoryABI, 'renounceOwnership'>({
    abi: spnFactoryABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link spnFactoryABI}__ and `functionName` set to `"safeMint"`.
 */
export function useSpnFactorySafeMint<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof spnFactoryABI, 'safeMint'>['abi'],
        'safeMint'
      > & { functionName?: 'safeMint' }
    : UseContractWriteConfig<TMode, typeof spnFactoryABI, 'safeMint'> & {
        abi?: never
        functionName?: 'safeMint'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof spnFactoryABI, 'safeMint'>({
    abi: spnFactoryABI,
    functionName: 'safeMint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link spnFactoryABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useSpnFactorySafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof spnFactoryABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof spnFactoryABI,
        'safeTransferFrom'
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof spnFactoryABI, 'safeTransferFrom'>({
    abi: spnFactoryABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link spnFactoryABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useSpnFactorySetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof spnFactoryABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        TMode,
        typeof spnFactoryABI,
        'setApprovalForAll'
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof spnFactoryABI, 'setApprovalForAll'>({
    abi: spnFactoryABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link spnFactoryABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useSpnFactoryTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof spnFactoryABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof spnFactoryABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof spnFactoryABI, 'transferFrom'>({
    abi: spnFactoryABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link spnFactoryABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useSpnFactoryTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof spnFactoryABI,
          'transferOwnership'
        >['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        TMode,
        typeof spnFactoryABI,
        'transferOwnership'
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof spnFactoryABI, 'transferOwnership'>({
    abi: spnFactoryABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link spnFactoryABI}__ and `functionName` set to `"unpause"`.
 */
export function useSpnFactoryUnpause<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof spnFactoryABI, 'unpause'>['abi'],
        'unpause'
      > & { functionName?: 'unpause' }
    : UseContractWriteConfig<TMode, typeof spnFactoryABI, 'unpause'> & {
        abi?: never
        functionName?: 'unpause'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof spnFactoryABI, 'unpause'>({
    abi: spnFactoryABI,
    functionName: 'unpause',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link spnFactoryABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useSpnFactoryUpgradeTo<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof spnFactoryABI, 'upgradeTo'>['abi'],
        'upgradeTo'
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<TMode, typeof spnFactoryABI, 'upgradeTo'> & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof spnFactoryABI, 'upgradeTo'>({
    abi: spnFactoryABI,
    functionName: 'upgradeTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link spnFactoryABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useSpnFactoryUpgradeToAndCall<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof spnFactoryABI,
          'upgradeToAndCall'
        >['abi'],
        'upgradeToAndCall'
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<
        TMode,
        typeof spnFactoryABI,
        'upgradeToAndCall'
      > & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof spnFactoryABI, 'upgradeToAndCall'>({
    abi: spnFactoryABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link spnFactoryABI}__ and `functionName` set to `"userBurn"`.
 */
export function useSpnFactoryUserBurn<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof spnFactoryABI, 'userBurn'>['abi'],
        'userBurn'
      > & { functionName?: 'userBurn' }
    : UseContractWriteConfig<TMode, typeof spnFactoryABI, 'userBurn'> & {
        abi?: never
        functionName?: 'userBurn'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof spnFactoryABI, 'userBurn'>({
    abi: spnFactoryABI,
    functionName: 'userBurn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link spnFactoryABI}__.
 */
export function usePrepareSpnFactoryWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof spnFactoryABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: spnFactoryABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof spnFactoryABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link spnFactoryABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareSpnFactoryApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof spnFactoryABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: spnFactoryABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof spnFactoryABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link spnFactoryABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareSpnFactoryBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof spnFactoryABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: spnFactoryABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof spnFactoryABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link spnFactoryABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareSpnFactoryInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof spnFactoryABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: spnFactoryABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof spnFactoryABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link spnFactoryABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function usePrepareSpnFactoryOnErc721Received(
  config: Omit<
    UsePrepareContractWriteConfig<typeof spnFactoryABI, 'onERC721Received'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: spnFactoryABI,
    functionName: 'onERC721Received',
    ...config,
  } as UsePrepareContractWriteConfig<typeof spnFactoryABI, 'onERC721Received'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link spnFactoryABI}__ and `functionName` set to `"pause"`.
 */
export function usePrepareSpnFactoryPause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof spnFactoryABI, 'pause'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: spnFactoryABI,
    functionName: 'pause',
    ...config,
  } as UsePrepareContractWriteConfig<typeof spnFactoryABI, 'pause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link spnFactoryABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareSpnFactoryRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof spnFactoryABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: spnFactoryABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof spnFactoryABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link spnFactoryABI}__ and `functionName` set to `"safeMint"`.
 */
export function usePrepareSpnFactorySafeMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof spnFactoryABI, 'safeMint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: spnFactoryABI,
    functionName: 'safeMint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof spnFactoryABI, 'safeMint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link spnFactoryABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareSpnFactorySafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof spnFactoryABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: spnFactoryABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof spnFactoryABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link spnFactoryABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareSpnFactorySetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof spnFactoryABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: spnFactoryABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof spnFactoryABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link spnFactoryABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareSpnFactoryTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof spnFactoryABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: spnFactoryABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof spnFactoryABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link spnFactoryABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareSpnFactoryTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof spnFactoryABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: spnFactoryABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof spnFactoryABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link spnFactoryABI}__ and `functionName` set to `"unpause"`.
 */
export function usePrepareSpnFactoryUnpause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof spnFactoryABI, 'unpause'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: spnFactoryABI,
    functionName: 'unpause',
    ...config,
  } as UsePrepareContractWriteConfig<typeof spnFactoryABI, 'unpause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link spnFactoryABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareSpnFactoryUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof spnFactoryABI, 'upgradeTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: spnFactoryABI,
    functionName: 'upgradeTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof spnFactoryABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link spnFactoryABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareSpnFactoryUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof spnFactoryABI, 'upgradeToAndCall'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: spnFactoryABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof spnFactoryABI, 'upgradeToAndCall'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link spnFactoryABI}__ and `functionName` set to `"userBurn"`.
 */
export function usePrepareSpnFactoryUserBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof spnFactoryABI, 'userBurn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: spnFactoryABI,
    functionName: 'userBurn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof spnFactoryABI, 'userBurn'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link spnFactoryABI}__.
 */
export function useSpnFactoryEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof spnFactoryABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: spnFactoryABI,
    ...config,
  } as UseContractEventConfig<typeof spnFactoryABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link spnFactoryABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useSpnFactoryAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof spnFactoryABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: spnFactoryABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof spnFactoryABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link spnFactoryABI}__ and `eventName` set to `"Approval"`.
 */
export function useSpnFactoryApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof spnFactoryABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: spnFactoryABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof spnFactoryABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link spnFactoryABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useSpnFactoryApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof spnFactoryABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: spnFactoryABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof spnFactoryABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link spnFactoryABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useSpnFactoryBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof spnFactoryABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: spnFactoryABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<typeof spnFactoryABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link spnFactoryABI}__ and `eventName` set to `"Initialized"`.
 */
export function useSpnFactoryInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof spnFactoryABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: spnFactoryABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof spnFactoryABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link spnFactoryABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useSpnFactoryOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof spnFactoryABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: spnFactoryABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof spnFactoryABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link spnFactoryABI}__ and `eventName` set to `"Paused"`.
 */
export function useSpnFactoryPausedEvent(
  config: Omit<
    UseContractEventConfig<typeof spnFactoryABI, 'Paused'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: spnFactoryABI,
    eventName: 'Paused',
    ...config,
  } as UseContractEventConfig<typeof spnFactoryABI, 'Paused'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link spnFactoryABI}__ and `eventName` set to `"Transfer"`.
 */
export function useSpnFactoryTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof spnFactoryABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: spnFactoryABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof spnFactoryABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link spnFactoryABI}__ and `eventName` set to `"Unpaused"`.
 */
export function useSpnFactoryUnpausedEvent(
  config: Omit<
    UseContractEventConfig<typeof spnFactoryABI, 'Unpaused'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: spnFactoryABI,
    eventName: 'Unpaused',
    ...config,
  } as UseContractEventConfig<typeof spnFactoryABI, 'Unpaused'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link spnFactoryABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useSpnFactoryUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof spnFactoryABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: spnFactoryABI,
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof spnFactoryABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnable(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ownableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof ownableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ownableABI,
    ...config,
  } as UseContractReadConfig<typeof ownableABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"owner"`.
 */
export function useOwnableOwner(
  config: Omit<
    UseContractReadConfig<typeof ownableABI, 'owner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ownableABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof ownableABI, 'owner'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ownableABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ownableABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ownableABI, TFunctionName>({
    abi: ownableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useOwnableRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ownableABI,
          'renounceOwnership'
        >['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<TMode, typeof ownableABI, 'renounceOwnership'> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ownableABI, 'renounceOwnership'>({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useOwnableTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ownableABI,
          'transferOwnership'
        >['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<TMode, typeof ownableABI, 'transferOwnership'> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ownableABI, 'transferOwnership'>({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function usePrepareOwnableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareOwnableRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareOwnableTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ownableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ownableABI,
    ...config,
  } as UseContractEventConfig<typeof ownableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useOwnableOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof ownableABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ownableABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof ownableABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iTablelandControllerABI}__.
 */
export function useITablelandController(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iTablelandControllerABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iTablelandControllerABI}__.
 */
export function useITablelandControllerWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iTablelandControllerABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof iTablelandControllerABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iTablelandControllerABI, TFunctionName>(
    { abi: iTablelandControllerABI, ...config } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iTablelandControllerABI}__ and `functionName` set to `"getPolicy"`.
 */
export function useITablelandControllerGetPolicy<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iTablelandControllerABI,
          'getPolicy'
        >['abi'],
        'getPolicy'
      > & { functionName?: 'getPolicy' }
    : UseContractWriteConfig<
        TMode,
        typeof iTablelandControllerABI,
        'getPolicy'
      > & {
        abi?: never
        functionName?: 'getPolicy'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iTablelandControllerABI, 'getPolicy'>({
    abi: iTablelandControllerABI,
    functionName: 'getPolicy',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iTablelandControllerABI}__.
 */
export function usePrepareITablelandControllerWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iTablelandControllerABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iTablelandControllerABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iTablelandControllerABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iTablelandControllerABI}__ and `functionName` set to `"getPolicy"`.
 */
export function usePrepareITablelandControllerGetPolicy(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iTablelandControllerABI, 'getPolicy'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iTablelandControllerABI,
    functionName: 'getPolicy',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iTablelandControllerABI,
    'getPolicy'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iTablelandTablesABI}__.
 */
export function useITablelandTables(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iTablelandTablesABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iTablelandTablesABI}__.
 */
export function useITablelandTablesWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iTablelandTablesABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof iTablelandTablesABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iTablelandTablesABI, TFunctionName>({
    abi: iTablelandTablesABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iTablelandTablesABI}__ and `functionName` set to `"createTable"`.
 */
export function useITablelandTablesCreateTable<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iTablelandTablesABI,
          'createTable'
        >['abi'],
        'createTable'
      > & { functionName?: 'createTable' }
    : UseContractWriteConfig<
        TMode,
        typeof iTablelandTablesABI,
        'createTable'
      > & {
        abi?: never
        functionName?: 'createTable'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iTablelandTablesABI, 'createTable'>({
    abi: iTablelandTablesABI,
    functionName: 'createTable',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iTablelandTablesABI}__ and `functionName` set to `"getController"`.
 */
export function useITablelandTablesGetController<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iTablelandTablesABI,
          'getController'
        >['abi'],
        'getController'
      > & { functionName?: 'getController' }
    : UseContractWriteConfig<
        TMode,
        typeof iTablelandTablesABI,
        'getController'
      > & {
        abi?: never
        functionName?: 'getController'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iTablelandTablesABI, 'getController'>({
    abi: iTablelandTablesABI,
    functionName: 'getController',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iTablelandTablesABI}__ and `functionName` set to `"lockController"`.
 */
export function useITablelandTablesLockController<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iTablelandTablesABI,
          'lockController'
        >['abi'],
        'lockController'
      > & { functionName?: 'lockController' }
    : UseContractWriteConfig<
        TMode,
        typeof iTablelandTablesABI,
        'lockController'
      > & {
        abi?: never
        functionName?: 'lockController'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iTablelandTablesABI, 'lockController'>({
    abi: iTablelandTablesABI,
    functionName: 'lockController',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iTablelandTablesABI}__ and `functionName` set to `"pause"`.
 */
export function useITablelandTablesPause<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iTablelandTablesABI, 'pause'>['abi'],
        'pause'
      > & { functionName?: 'pause' }
    : UseContractWriteConfig<TMode, typeof iTablelandTablesABI, 'pause'> & {
        abi?: never
        functionName?: 'pause'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iTablelandTablesABI, 'pause'>({
    abi: iTablelandTablesABI,
    functionName: 'pause',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iTablelandTablesABI}__ and `functionName` set to `"runSQL"`.
 */
export function useITablelandTablesRunSql<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iTablelandTablesABI, 'runSQL'>['abi'],
        'runSQL'
      > & { functionName?: 'runSQL' }
    : UseContractWriteConfig<TMode, typeof iTablelandTablesABI, 'runSQL'> & {
        abi?: never
        functionName?: 'runSQL'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iTablelandTablesABI, 'runSQL'>({
    abi: iTablelandTablesABI,
    functionName: 'runSQL',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iTablelandTablesABI}__ and `functionName` set to `"setBaseURI"`.
 */
export function useITablelandTablesSetBaseUri<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iTablelandTablesABI,
          'setBaseURI'
        >['abi'],
        'setBaseURI'
      > & { functionName?: 'setBaseURI' }
    : UseContractWriteConfig<
        TMode,
        typeof iTablelandTablesABI,
        'setBaseURI'
      > & {
        abi?: never
        functionName?: 'setBaseURI'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iTablelandTablesABI, 'setBaseURI'>({
    abi: iTablelandTablesABI,
    functionName: 'setBaseURI',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iTablelandTablesABI}__ and `functionName` set to `"setController"`.
 */
export function useITablelandTablesSetController<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iTablelandTablesABI,
          'setController'
        >['abi'],
        'setController'
      > & { functionName?: 'setController' }
    : UseContractWriteConfig<
        TMode,
        typeof iTablelandTablesABI,
        'setController'
      > & {
        abi?: never
        functionName?: 'setController'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iTablelandTablesABI, 'setController'>({
    abi: iTablelandTablesABI,
    functionName: 'setController',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iTablelandTablesABI}__ and `functionName` set to `"unpause"`.
 */
export function useITablelandTablesUnpause<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iTablelandTablesABI,
          'unpause'
        >['abi'],
        'unpause'
      > & { functionName?: 'unpause' }
    : UseContractWriteConfig<TMode, typeof iTablelandTablesABI, 'unpause'> & {
        abi?: never
        functionName?: 'unpause'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iTablelandTablesABI, 'unpause'>({
    abi: iTablelandTablesABI,
    functionName: 'unpause',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iTablelandTablesABI}__.
 */
export function usePrepareITablelandTablesWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iTablelandTablesABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iTablelandTablesABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iTablelandTablesABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iTablelandTablesABI}__ and `functionName` set to `"createTable"`.
 */
export function usePrepareITablelandTablesCreateTable(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iTablelandTablesABI, 'createTable'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iTablelandTablesABI,
    functionName: 'createTable',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iTablelandTablesABI, 'createTable'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iTablelandTablesABI}__ and `functionName` set to `"getController"`.
 */
export function usePrepareITablelandTablesGetController(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iTablelandTablesABI, 'getController'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iTablelandTablesABI,
    functionName: 'getController',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iTablelandTablesABI,
    'getController'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iTablelandTablesABI}__ and `functionName` set to `"lockController"`.
 */
export function usePrepareITablelandTablesLockController(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iTablelandTablesABI, 'lockController'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iTablelandTablesABI,
    functionName: 'lockController',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iTablelandTablesABI,
    'lockController'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iTablelandTablesABI}__ and `functionName` set to `"pause"`.
 */
export function usePrepareITablelandTablesPause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iTablelandTablesABI, 'pause'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iTablelandTablesABI,
    functionName: 'pause',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iTablelandTablesABI, 'pause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iTablelandTablesABI}__ and `functionName` set to `"runSQL"`.
 */
export function usePrepareITablelandTablesRunSql(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iTablelandTablesABI, 'runSQL'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iTablelandTablesABI,
    functionName: 'runSQL',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iTablelandTablesABI, 'runSQL'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iTablelandTablesABI}__ and `functionName` set to `"setBaseURI"`.
 */
export function usePrepareITablelandTablesSetBaseUri(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iTablelandTablesABI, 'setBaseURI'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iTablelandTablesABI,
    functionName: 'setBaseURI',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iTablelandTablesABI, 'setBaseURI'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iTablelandTablesABI}__ and `functionName` set to `"setController"`.
 */
export function usePrepareITablelandTablesSetController(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iTablelandTablesABI, 'setController'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iTablelandTablesABI,
    functionName: 'setController',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iTablelandTablesABI,
    'setController'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iTablelandTablesABI}__ and `functionName` set to `"unpause"`.
 */
export function usePrepareITablelandTablesUnpause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iTablelandTablesABI, 'unpause'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iTablelandTablesABI,
    functionName: 'unpause',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iTablelandTablesABI, 'unpause'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iTablelandTablesABI}__.
 */
export function useITablelandTablesEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iTablelandTablesABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iTablelandTablesABI,
    ...config,
  } as UseContractEventConfig<typeof iTablelandTablesABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iTablelandTablesABI}__ and `eventName` set to `"CreateTable"`.
 */
export function useITablelandTablesCreateTableEvent(
  config: Omit<
    UseContractEventConfig<typeof iTablelandTablesABI, 'CreateTable'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iTablelandTablesABI,
    eventName: 'CreateTable',
    ...config,
  } as UseContractEventConfig<typeof iTablelandTablesABI, 'CreateTable'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iTablelandTablesABI}__ and `eventName` set to `"RunSQL"`.
 */
export function useITablelandTablesRunSqlEvent(
  config: Omit<
    UseContractEventConfig<typeof iTablelandTablesABI, 'RunSQL'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iTablelandTablesABI,
    eventName: 'RunSQL',
    ...config,
  } as UseContractEventConfig<typeof iTablelandTablesABI, 'RunSQL'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iTablelandTablesABI}__ and `eventName` set to `"SetController"`.
 */
export function useITablelandTablesSetControllerEvent(
  config: Omit<
    UseContractEventConfig<typeof iTablelandTablesABI, 'SetController'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iTablelandTablesABI,
    eventName: 'SetController',
    ...config,
  } as UseContractEventConfig<typeof iTablelandTablesABI, 'SetController'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iTablelandTablesABI}__ and `eventName` set to `"TransferTable"`.
 */
export function useITablelandTablesTransferTableEvent(
  config: Omit<
    UseContractEventConfig<typeof iTablelandTablesABI, 'TransferTable'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iTablelandTablesABI,
    eventName: 'TransferTable',
    ...config,
  } as UseContractEventConfig<typeof iTablelandTablesABI, 'TransferTable'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ownableUpgradeableABI}__.
 */
export function useOwnableUpgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ownableUpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableUpgradeableABI}__.
 */
export function useOwnableUpgradeableRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof ownableUpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ownableUpgradeableABI,
    ...config,
  } as UseContractReadConfig<typeof ownableUpgradeableABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableUpgradeableABI}__ and `functionName` set to `"owner"`.
 */
export function useOwnableUpgradeableOwner(
  config: Omit<
    UseContractReadConfig<typeof ownableUpgradeableABI, 'owner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ownableUpgradeableABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof ownableUpgradeableABI, 'owner'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableUpgradeableABI}__.
 */
export function useOwnableUpgradeableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ownableUpgradeableABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof ownableUpgradeableABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ownableUpgradeableABI, TFunctionName>({
    abi: ownableUpgradeableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableUpgradeableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useOwnableUpgradeableRenounceOwnership<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ownableUpgradeableABI,
          'renounceOwnership'
        >['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        TMode,
        typeof ownableUpgradeableABI,
        'renounceOwnership'
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ownableUpgradeableABI,
    'renounceOwnership'
  >({
    abi: ownableUpgradeableABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableUpgradeableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useOwnableUpgradeableTransferOwnership<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ownableUpgradeableABI,
          'transferOwnership'
        >['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        TMode,
        typeof ownableUpgradeableABI,
        'transferOwnership'
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ownableUpgradeableABI,
    'transferOwnership'
  >({
    abi: ownableUpgradeableABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableUpgradeableABI}__.
 */
export function usePrepareOwnableUpgradeableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableUpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableUpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ownableUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableUpgradeableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareOwnableUpgradeableRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ownableUpgradeableABI,
      'renounceOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableUpgradeableABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ownableUpgradeableABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableUpgradeableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareOwnableUpgradeableTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ownableUpgradeableABI,
      'transferOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableUpgradeableABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ownableUpgradeableABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableUpgradeableABI}__.
 */
export function useOwnableUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ownableUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ownableUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof ownableUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useOwnableUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof ownableUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ownableUpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof ownableUpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableUpgradeableABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useOwnableUpgradeableOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<
      typeof ownableUpgradeableABI,
      'OwnershipTransferred'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ownableUpgradeableABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<
    typeof ownableUpgradeableABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc1822ProxiableUpgradeableABI}__.
 */
export function useIerc1822ProxiableUpgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ierc1822ProxiableUpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1822ProxiableUpgradeableABI}__.
 */
export function useIerc1822ProxiableUpgradeableRead<
  TFunctionName extends string,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1822ProxiableUpgradeableABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1822ProxiableUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc1822ProxiableUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1822ProxiableUpgradeableABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useIerc1822ProxiableUpgradeableProxiableUuid(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1822ProxiableUpgradeableABI,
      'proxiableUUID'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1822ProxiableUpgradeableABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<
    typeof ierc1822ProxiableUpgradeableABI,
    'proxiableUUID'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link pausableUpgradeableABI}__.
 */
export function usePausableUpgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: pausableUpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pausableUpgradeableABI}__.
 */
export function usePausableUpgradeableRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof pausableUpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: pausableUpgradeableABI,
    ...config,
  } as UseContractReadConfig<typeof pausableUpgradeableABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pausableUpgradeableABI}__ and `functionName` set to `"paused"`.
 */
export function usePausableUpgradeablePaused(
  config: Omit<
    UseContractReadConfig<typeof pausableUpgradeableABI, 'paused'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pausableUpgradeableABI,
    functionName: 'paused',
    ...config,
  } as UseContractReadConfig<typeof pausableUpgradeableABI, 'paused'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pausableUpgradeableABI}__.
 */
export function usePausableUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof pausableUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: pausableUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof pausableUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pausableUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function usePausableUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof pausableUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pausableUpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof pausableUpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pausableUpgradeableABI}__ and `eventName` set to `"Paused"`.
 */
export function usePausableUpgradeablePausedEvent(
  config: Omit<
    UseContractEventConfig<typeof pausableUpgradeableABI, 'Paused'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pausableUpgradeableABI,
    eventName: 'Paused',
    ...config,
  } as UseContractEventConfig<typeof pausableUpgradeableABI, 'Paused'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pausableUpgradeableABI}__ and `eventName` set to `"Unpaused"`.
 */
export function usePausableUpgradeableUnpausedEvent(
  config: Omit<
    UseContractEventConfig<typeof pausableUpgradeableABI, 'Unpaused'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pausableUpgradeableABI,
    eventName: 'Unpaused',
    ...config,
  } as UseContractEventConfig<typeof pausableUpgradeableABI, 'Unpaused'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link contextUpgradeableABI}__.
 */
export function useContextUpgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: contextUpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link contextUpgradeableABI}__.
 */
export function useContextUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof contextUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: contextUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof contextUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link contextUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useContextUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof contextUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: contextUpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof contextUpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link reentrancyGuardUpgradeableABI}__.
 */
export function useReentrancyGuardUpgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: reentrancyGuardUpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link reentrancyGuardUpgradeableABI}__.
 */
export function useReentrancyGuardUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof reentrancyGuardUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: reentrancyGuardUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof reentrancyGuardUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link reentrancyGuardUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useReentrancyGuardUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof reentrancyGuardUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: reentrancyGuardUpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<
    typeof reentrancyGuardUpgradeableABI,
    'Initialized'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc721ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721Read<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc721BalanceOf(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, 'balanceOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, 'balanceOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"getApproved"`.
 */
export function useIerc721GetApproved(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, 'getApproved'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, 'getApproved'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc721IsApprovedForAll(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, 'isApprovedForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, 'isApprovedForAll'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useIerc721OwnerOf(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, 'ownerOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, 'ownerOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc721SupportsInterface(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, 'supportsInterface'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, 'supportsInterface'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721Write<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ierc721ABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721ABI, TFunctionName>({
    abi: ierc721ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc721Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721ABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof ierc721ABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721ABI, 'approve'>({
    abi: ierc721ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc721SafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721ABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc721ABI, 'safeTransferFrom'> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721ABI, 'safeTransferFrom'>({
    abi: ierc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc721SetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721ABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof ierc721ABI, 'setApprovalForAll'> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721ABI, 'setApprovalForAll'>({
    abi: ierc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc721TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc721ABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721ABI, 'transferFrom'>({
    abi: ierc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function usePrepareIerc721Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc721Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc721SafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc721SetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc721TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc721ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721ABI,
    ...config,
  } as UseContractEventConfig<typeof ierc721ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc721ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc721ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc721ApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721ABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721ABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof ierc721ABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc721TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc721ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc721ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Read<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: erc721ABI, ...config } as UseContractReadConfig<
    typeof erc721ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc721BalanceOf(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'balanceOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'balanceOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc721GetApproved(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'getApproved'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'getApproved'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc721IsApprovedForAll(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'isApprovedForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'isApprovedForAll'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"name"`.
 */
export function useErc721Name(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'name'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'name'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc721OwnerOf(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'ownerOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'ownerOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc721SupportsInterface(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'supportsInterface'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'supportsInterface'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc721Symbol(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'symbol'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'symbol'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc721TokenUri(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'tokenURI'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'tokenURI'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Write<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc721ABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721ABI, TFunctionName>({
    abi: erc721ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721ABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc721ABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721ABI, 'approve'>({
    abi: erc721ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721SafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721ABI, 'safeTransferFrom'>['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof erc721ABI, 'safeTransferFrom'> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721ABI, 'safeTransferFrom'>({
    abi: erc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721SetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721ABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof erc721ABI, 'setApprovalForAll'> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721ABI, 'setApprovalForAll'>({
    abi: erc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof erc721ABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721ABI, 'transferFrom'>({
    abi: erc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__.
 */
export function usePrepareErc721Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721SafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721SetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721ApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc721ReceiverABI}__.
 */
export function useIerc721Receiver(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ierc721ReceiverABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ReceiverABI}__.
 */
export function useIerc721ReceiverWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721ReceiverABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof ierc721ReceiverABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721ReceiverABI, TFunctionName>({
    abi: ierc721ReceiverABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ReceiverABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function useIerc721ReceiverOnErc721Received<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721ReceiverABI,
          'onERC721Received'
        >['abi'],
        'onERC721Received'
      > & { functionName?: 'onERC721Received' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc721ReceiverABI,
        'onERC721Received'
      > & {
        abi?: never
        functionName?: 'onERC721Received'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721ReceiverABI, 'onERC721Received'>(
    {
      abi: ierc721ReceiverABI,
      functionName: 'onERC721Received',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ReceiverABI}__.
 */
export function usePrepareIerc721ReceiverWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ReceiverABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ReceiverABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ReceiverABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ReceiverABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function usePrepareIerc721ReceiverOnErc721Received(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721ReceiverABI,
      'onERC721Received'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ReceiverABI,
    functionName: 'onERC721Received',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721ReceiverABI,
    'onERC721Received'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc165ABI}__.
 */
export function useErc165(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc165ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165ABI}__.
 */
export function useErc165Read<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof erc165ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: erc165ABI, ...config } as UseContractReadConfig<
    typeof erc165ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc165SupportsInterface(
  config: Omit<
    UseContractReadConfig<typeof erc165ABI, 'supportsInterface'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc165ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof erc165ABI, 'supportsInterface'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc165ABI}__.
 */
export function useIerc165(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc165ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165ABI}__.
 */
export function useIerc165Read<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof ierc165ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc165ABI,
    ...config,
  } as UseContractReadConfig<typeof ierc165ABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc165SupportsInterface(
  config: Omit<
    UseContractReadConfig<typeof ierc165ABI, 'supportsInterface'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc165ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof ierc165ABI, 'supportsInterface'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__.
 */
export function useErc1967UpgradeUpgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: erc1967UpgradeUpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__.
 */
export function useErc1967UpgradeUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967UpgradeUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useErc1967UpgradeUpgradeableAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967UpgradeUpgradeableABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<
    typeof erc1967UpgradeUpgradeableABI,
    'AdminChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useErc1967UpgradeUpgradeableBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof erc1967UpgradeUpgradeableABI,
      'BeaconUpgraded'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967UpgradeUpgradeableABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<
    typeof erc1967UpgradeUpgradeableABI,
    'BeaconUpgraded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc1967UpgradeUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967UpgradeUpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<
    typeof erc1967UpgradeUpgradeableABI,
    'Initialized'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useErc1967UpgradeUpgradeableUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967UpgradeUpgradeableABI,
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iBeaconUpgradeableABI}__.
 */
export function useIBeaconUpgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iBeaconUpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBeaconUpgradeableABI}__.
 */
export function useIBeaconUpgradeableRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof iBeaconUpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iBeaconUpgradeableABI,
    ...config,
  } as UseContractReadConfig<typeof iBeaconUpgradeableABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBeaconUpgradeableABI}__ and `functionName` set to `"implementation"`.
 */
export function useIBeaconUpgradeableImplementation(
  config: Omit<
    UseContractReadConfig<typeof iBeaconUpgradeableABI, 'implementation'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBeaconUpgradeableABI,
    functionName: 'implementation',
    ...config,
  } as UseContractReadConfig<typeof iBeaconUpgradeableABI, 'implementation'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link initializableABI}__.
 */
export function useInitializable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: initializableABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link initializableABI}__.
 */
export function useInitializableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof initializableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: initializableABI,
    ...config,
  } as UseContractEventConfig<typeof initializableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link initializableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useInitializableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof initializableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: initializableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof initializableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link uupsUpgradeableABI}__.
 */
export function useUupsUpgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: uupsUpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link uupsUpgradeableABI}__.
 */
export function useUupsUpgradeableRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof uupsUpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: uupsUpgradeableABI,
    ...config,
  } as UseContractReadConfig<typeof uupsUpgradeableABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useUupsUpgradeableProxiableUuid(
  config: Omit<
    UseContractReadConfig<typeof uupsUpgradeableABI, 'proxiableUUID'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: uupsUpgradeableABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<typeof uupsUpgradeableABI, 'proxiableUUID'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__.
 */
export function useUupsUpgradeableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof uupsUpgradeableABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof uupsUpgradeableABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof uupsUpgradeableABI, TFunctionName>({
    abi: uupsUpgradeableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useUupsUpgradeableUpgradeTo<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof uupsUpgradeableABI,
          'upgradeTo'
        >['abi'],
        'upgradeTo'
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<TMode, typeof uupsUpgradeableABI, 'upgradeTo'> & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof uupsUpgradeableABI, 'upgradeTo'>({
    abi: uupsUpgradeableABI,
    functionName: 'upgradeTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useUupsUpgradeableUpgradeToAndCall<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof uupsUpgradeableABI,
          'upgradeToAndCall'
        >['abi'],
        'upgradeToAndCall'
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<
        TMode,
        typeof uupsUpgradeableABI,
        'upgradeToAndCall'
      > & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof uupsUpgradeableABI, 'upgradeToAndCall'>(
    {
      abi: uupsUpgradeableABI,
      functionName: 'upgradeToAndCall',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__.
 */
export function usePrepareUupsUpgradeableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof uupsUpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: uupsUpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof uupsUpgradeableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareUupsUpgradeableUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof uupsUpgradeableABI, 'upgradeTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: uupsUpgradeableABI,
    functionName: 'upgradeTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof uupsUpgradeableABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareUupsUpgradeableUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof uupsUpgradeableABI,
      'upgradeToAndCall'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: uupsUpgradeableABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof uupsUpgradeableABI,
    'upgradeToAndCall'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__.
 */
export function useUupsUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof uupsUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: uupsUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof uupsUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useUupsUpgradeableAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof uupsUpgradeableABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: uupsUpgradeableABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof uupsUpgradeableABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useUupsUpgradeableBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof uupsUpgradeableABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: uupsUpgradeableABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<typeof uupsUpgradeableABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useUupsUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof uupsUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: uupsUpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof uupsUpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useUupsUpgradeableUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof uupsUpgradeableABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: uupsUpgradeableABI,
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof uupsUpgradeableABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc721UpgradeableABI}__.
 */
export function useErc721Upgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: erc721UpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UpgradeableABI}__.
 */
export function useErc721UpgradeableRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof erc721UpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UpgradeableABI,
    ...config,
  } as UseContractReadConfig<typeof erc721UpgradeableABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc721UpgradeableBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof erc721UpgradeableABI, 'balanceOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UpgradeableABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc721UpgradeableABI, 'balanceOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc721UpgradeableGetApproved(
  config: Omit<
    UseContractReadConfig<typeof erc721UpgradeableABI, 'getApproved'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UpgradeableABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof erc721UpgradeableABI, 'getApproved'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc721UpgradeableIsApprovedForAll(
  config: Omit<
    UseContractReadConfig<typeof erc721UpgradeableABI, 'isApprovedForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UpgradeableABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof erc721UpgradeableABI, 'isApprovedForAll'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"name"`.
 */
export function useErc721UpgradeableName(
  config: Omit<
    UseContractReadConfig<typeof erc721UpgradeableABI, 'name'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UpgradeableABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc721UpgradeableABI, 'name'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc721UpgradeableOwnerOf(
  config: Omit<
    UseContractReadConfig<typeof erc721UpgradeableABI, 'ownerOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UpgradeableABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof erc721UpgradeableABI, 'ownerOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc721UpgradeableSupportsInterface(
  config: Omit<
    UseContractReadConfig<typeof erc721UpgradeableABI, 'supportsInterface'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UpgradeableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof erc721UpgradeableABI, 'supportsInterface'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc721UpgradeableSymbol(
  config: Omit<
    UseContractReadConfig<typeof erc721UpgradeableABI, 'symbol'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UpgradeableABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc721UpgradeableABI, 'symbol'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc721UpgradeableTokenUri(
  config: Omit<
    UseContractReadConfig<typeof erc721UpgradeableABI, 'tokenURI'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UpgradeableABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof erc721UpgradeableABI, 'tokenURI'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721UpgradeableABI}__.
 */
export function useErc721UpgradeableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721UpgradeableABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof erc721UpgradeableABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721UpgradeableABI, TFunctionName>({
    abi: erc721UpgradeableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721UpgradeableApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721UpgradeableABI,
          'approve'
        >['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc721UpgradeableABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721UpgradeableABI, 'approve'>({
    abi: erc721UpgradeableABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721UpgradeableSafeTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721UpgradeableABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof erc721UpgradeableABI,
        'safeTransferFrom'
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc721UpgradeableABI,
    'safeTransferFrom'
  >({
    abi: erc721UpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721UpgradeableSetApprovalForAll<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721UpgradeableABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        TMode,
        typeof erc721UpgradeableABI,
        'setApprovalForAll'
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc721UpgradeableABI,
    'setApprovalForAll'
  >({
    abi: erc721UpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721UpgradeableTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721UpgradeableABI,
          'transferFrom'
        >['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof erc721UpgradeableABI,
        'transferFrom'
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721UpgradeableABI, 'transferFrom'>({
    abi: erc721UpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721UpgradeableABI}__.
 */
export function usePrepareErc721UpgradeableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721UpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721UpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721UpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721UpgradeableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721UpgradeableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721UpgradeableABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721UpgradeableABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721UpgradeableSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721UpgradeableABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721UpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721UpgradeableABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721UpgradeableSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721UpgradeableABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721UpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721UpgradeableABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721UpgradeableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721UpgradeableABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721UpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721UpgradeableABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721UpgradeableABI}__.
 */
export function useErc721UpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc721UpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721UpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof erc721UpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721UpgradeableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721UpgradeableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721UpgradeableABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc721UpgradeableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721UpgradeableApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721UpgradeableABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721UpgradeableABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof erc721UpgradeableABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc721UpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721UpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721UpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof erc721UpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721UpgradeableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721UpgradeableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721UpgradeableABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc721UpgradeableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc721ReceiverUpgradeableABI}__.
 */
export function useIerc721ReceiverUpgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ierc721ReceiverUpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ReceiverUpgradeableABI}__.
 */
export function useIerc721ReceiverUpgradeableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721ReceiverUpgradeableABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof ierc721ReceiverUpgradeableABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc721ReceiverUpgradeableABI,
    TFunctionName
  >({ abi: ierc721ReceiverUpgradeableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ReceiverUpgradeableABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function useIerc721ReceiverUpgradeableOnErc721Received<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721ReceiverUpgradeableABI,
          'onERC721Received'
        >['abi'],
        'onERC721Received'
      > & { functionName?: 'onERC721Received' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc721ReceiverUpgradeableABI,
        'onERC721Received'
      > & {
        abi?: never
        functionName?: 'onERC721Received'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc721ReceiverUpgradeableABI,
    'onERC721Received'
  >({
    abi: ierc721ReceiverUpgradeableABI,
    functionName: 'onERC721Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ReceiverUpgradeableABI}__.
 */
export function usePrepareIerc721ReceiverUpgradeableWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721ReceiverUpgradeableABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ReceiverUpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721ReceiverUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ReceiverUpgradeableABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function usePrepareIerc721ReceiverUpgradeableOnErc721Received(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721ReceiverUpgradeableABI,
      'onERC721Received'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ReceiverUpgradeableABI,
    functionName: 'onERC721Received',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721ReceiverUpgradeableABI,
    'onERC721Received'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc721UpgradeableABI}__.
 */
export function useIerc721Upgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ierc721UpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721UpgradeableABI}__.
 */
export function useIerc721UpgradeableRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof ierc721UpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721UpgradeableABI,
    ...config,
  } as UseContractReadConfig<typeof ierc721UpgradeableABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc721UpgradeableBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof ierc721UpgradeableABI, 'balanceOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721UpgradeableABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof ierc721UpgradeableABI, 'balanceOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `functionName` set to `"getApproved"`.
 */
export function useIerc721UpgradeableGetApproved(
  config: Omit<
    UseContractReadConfig<typeof ierc721UpgradeableABI, 'getApproved'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721UpgradeableABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof ierc721UpgradeableABI, 'getApproved'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc721UpgradeableIsApprovedForAll(
  config: Omit<
    UseContractReadConfig<typeof ierc721UpgradeableABI, 'isApprovedForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721UpgradeableABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof ierc721UpgradeableABI, 'isApprovedForAll'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useIerc721UpgradeableOwnerOf(
  config: Omit<
    UseContractReadConfig<typeof ierc721UpgradeableABI, 'ownerOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721UpgradeableABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof ierc721UpgradeableABI, 'ownerOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc721UpgradeableSupportsInterface(
  config: Omit<
    UseContractReadConfig<typeof ierc721UpgradeableABI, 'supportsInterface'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721UpgradeableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof ierc721UpgradeableABI, 'supportsInterface'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721UpgradeableABI}__.
 */
export function useIerc721UpgradeableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721UpgradeableABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof ierc721UpgradeableABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721UpgradeableABI, TFunctionName>({
    abi: ierc721UpgradeableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc721UpgradeableApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721UpgradeableABI,
          'approve'
        >['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof ierc721UpgradeableABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721UpgradeableABI, 'approve'>({
    abi: ierc721UpgradeableABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc721UpgradeableSafeTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721UpgradeableABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc721UpgradeableABI,
        'safeTransferFrom'
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc721UpgradeableABI,
    'safeTransferFrom'
  >({
    abi: ierc721UpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc721UpgradeableSetApprovalForAll<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721UpgradeableABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc721UpgradeableABI,
        'setApprovalForAll'
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc721UpgradeableABI,
    'setApprovalForAll'
  >({
    abi: ierc721UpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc721UpgradeableTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721UpgradeableABI,
          'transferFrom'
        >['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc721UpgradeableABI,
        'transferFrom'
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721UpgradeableABI, 'transferFrom'>({
    abi: ierc721UpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721UpgradeableABI}__.
 */
export function usePrepareIerc721UpgradeableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721UpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721UpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721UpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc721UpgradeableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721UpgradeableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721UpgradeableABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721UpgradeableABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc721UpgradeableSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721UpgradeableABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721UpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721UpgradeableABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc721UpgradeableSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721UpgradeableABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721UpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721UpgradeableABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc721UpgradeableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721UpgradeableABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721UpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721UpgradeableABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721UpgradeableABI}__.
 */
export function useIerc721UpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc721UpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721UpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof ierc721UpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc721UpgradeableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721UpgradeableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721UpgradeableABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc721UpgradeableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc721UpgradeableApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721UpgradeableABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721UpgradeableABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof ierc721UpgradeableABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc721UpgradeableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721UpgradeableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721UpgradeableABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc721UpgradeableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc165UpgradeableABI}__.
 */
export function useErc165Upgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: erc165UpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165UpgradeableABI}__.
 */
export function useErc165UpgradeableRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof erc165UpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: erc165UpgradeableABI,
    ...config,
  } as UseContractReadConfig<typeof erc165UpgradeableABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165UpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc165UpgradeableSupportsInterface(
  config: Omit<
    UseContractReadConfig<typeof erc165UpgradeableABI, 'supportsInterface'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc165UpgradeableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof erc165UpgradeableABI, 'supportsInterface'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc165UpgradeableABI}__.
 */
export function useErc165UpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc165UpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc165UpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof erc165UpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc165UpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc165UpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc165UpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc165UpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof erc165UpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc165UpgradeableABI}__.
 */
export function useIerc165Upgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ierc165UpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165UpgradeableABI}__.
 */
export function useIerc165UpgradeableRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof ierc165UpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc165UpgradeableABI,
    ...config,
  } as UseContractReadConfig<typeof ierc165UpgradeableABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165UpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc165UpgradeableSupportsInterface(
  config: Omit<
    UseContractReadConfig<typeof ierc165UpgradeableABI, 'supportsInterface'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc165UpgradeableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof ierc165UpgradeableABI, 'supportsInterface'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc721BurnableABI}__.
 */
export function useErc721Burnable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: erc721BurnableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__.
 */
export function useErc721BurnableRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BurnableABI,
    ...config,
  } as UseContractReadConfig<typeof erc721BurnableABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc721BurnableBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableABI, 'balanceOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BurnableABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc721BurnableABI, 'balanceOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc721BurnableGetApproved(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableABI, 'getApproved'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BurnableABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof erc721BurnableABI, 'getApproved'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc721BurnableIsApprovedForAll(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableABI, 'isApprovedForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BurnableABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof erc721BurnableABI, 'isApprovedForAll'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"name"`.
 */
export function useErc721BurnableName(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableABI, 'name'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BurnableABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc721BurnableABI, 'name'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc721BurnableOwnerOf(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableABI, 'ownerOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BurnableABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof erc721BurnableABI, 'ownerOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc721BurnableSupportsInterface(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableABI, 'supportsInterface'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BurnableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof erc721BurnableABI, 'supportsInterface'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc721BurnableSymbol(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableABI, 'symbol'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BurnableABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc721BurnableABI, 'symbol'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc721BurnableTokenUri(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableABI, 'tokenURI'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BurnableABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof erc721BurnableABI, 'tokenURI'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__.
 */
export function useErc721BurnableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721BurnableABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc721BurnableABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721BurnableABI, TFunctionName>({
    abi: erc721BurnableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721BurnableApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721BurnableABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc721BurnableABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721BurnableABI, 'approve'>({
    abi: erc721BurnableABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"burn"`.
 */
export function useErc721BurnableBurn<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721BurnableABI, 'burn'>['abi'],
        'burn'
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<TMode, typeof erc721BurnableABI, 'burn'> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721BurnableABI, 'burn'>({
    abi: erc721BurnableABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721BurnableSafeTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721BurnableABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof erc721BurnableABI,
        'safeTransferFrom'
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721BurnableABI, 'safeTransferFrom'>({
    abi: erc721BurnableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721BurnableSetApprovalForAll<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721BurnableABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        TMode,
        typeof erc721BurnableABI,
        'setApprovalForAll'
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721BurnableABI, 'setApprovalForAll'>(
    {
      abi: erc721BurnableABI,
      functionName: 'setApprovalForAll',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721BurnableTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721BurnableABI,
          'transferFrom'
        >['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof erc721BurnableABI,
        'transferFrom'
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721BurnableABI, 'transferFrom'>({
    abi: erc721BurnableABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__.
 */
export function usePrepareErc721BurnableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721BurnableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721BurnableABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721BurnableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721BurnableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721BurnableABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareErc721BurnableBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721BurnableABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721BurnableSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721BurnableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721BurnableABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721BurnableSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721BurnableABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721BurnableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721BurnableABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721BurnableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721BurnableABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721BurnableABI}__.
 */
export function useErc721BurnableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc721BurnableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721BurnableABI,
    ...config,
  } as UseContractEventConfig<typeof erc721BurnableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721BurnableABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721BurnableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721BurnableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721BurnableABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc721BurnableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721BurnableABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721BurnableApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721BurnableABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721BurnableABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof erc721BurnableABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721BurnableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721BurnableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721BurnableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721BurnableABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc721BurnableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc721UriStorageABI}__.
 */
export function useErc721UriStorage(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: erc721UriStorageABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageABI}__.
 */
export function useErc721UriStorageRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof erc721UriStorageABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UriStorageABI,
    ...config,
  } as UseContractReadConfig<typeof erc721UriStorageABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc721UriStorageBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof erc721UriStorageABI, 'balanceOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UriStorageABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc721UriStorageABI, 'balanceOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc721UriStorageGetApproved(
  config: Omit<
    UseContractReadConfig<typeof erc721UriStorageABI, 'getApproved'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UriStorageABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof erc721UriStorageABI, 'getApproved'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc721UriStorageIsApprovedForAll(
  config: Omit<
    UseContractReadConfig<typeof erc721UriStorageABI, 'isApprovedForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UriStorageABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof erc721UriStorageABI, 'isApprovedForAll'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageABI}__ and `functionName` set to `"name"`.
 */
export function useErc721UriStorageName(
  config: Omit<
    UseContractReadConfig<typeof erc721UriStorageABI, 'name'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UriStorageABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc721UriStorageABI, 'name'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc721UriStorageOwnerOf(
  config: Omit<
    UseContractReadConfig<typeof erc721UriStorageABI, 'ownerOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UriStorageABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof erc721UriStorageABI, 'ownerOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc721UriStorageSupportsInterface(
  config: Omit<
    UseContractReadConfig<typeof erc721UriStorageABI, 'supportsInterface'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UriStorageABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof erc721UriStorageABI, 'supportsInterface'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc721UriStorageSymbol(
  config: Omit<
    UseContractReadConfig<typeof erc721UriStorageABI, 'symbol'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UriStorageABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc721UriStorageABI, 'symbol'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc721UriStorageTokenUri(
  config: Omit<
    UseContractReadConfig<typeof erc721UriStorageABI, 'tokenURI'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UriStorageABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof erc721UriStorageABI, 'tokenURI'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721UriStorageABI}__.
 */
export function useErc721UriStorageWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721UriStorageABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof erc721UriStorageABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721UriStorageABI, TFunctionName>({
    abi: erc721UriStorageABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721UriStorageABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721UriStorageApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721UriStorageABI,
          'approve'
        >['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc721UriStorageABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721UriStorageABI, 'approve'>({
    abi: erc721UriStorageABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721UriStorageABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721UriStorageSafeTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721UriStorageABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof erc721UriStorageABI,
        'safeTransferFrom'
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc721UriStorageABI,
    'safeTransferFrom'
  >({
    abi: erc721UriStorageABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721UriStorageABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721UriStorageSetApprovalForAll<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721UriStorageABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        TMode,
        typeof erc721UriStorageABI,
        'setApprovalForAll'
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc721UriStorageABI,
    'setApprovalForAll'
  >({
    abi: erc721UriStorageABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721UriStorageABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721UriStorageTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721UriStorageABI,
          'transferFrom'
        >['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof erc721UriStorageABI,
        'transferFrom'
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721UriStorageABI, 'transferFrom'>({
    abi: erc721UriStorageABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721UriStorageABI}__.
 */
export function usePrepareErc721UriStorageWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721UriStorageABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721UriStorageABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721UriStorageABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721UriStorageABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721UriStorageApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721UriStorageABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721UriStorageABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721UriStorageABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721UriStorageABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721UriStorageSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721UriStorageABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721UriStorageABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721UriStorageABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721UriStorageABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721UriStorageSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721UriStorageABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721UriStorageABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721UriStorageABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721UriStorageABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721UriStorageTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721UriStorageABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721UriStorageABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721UriStorageABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721UriStorageABI}__.
 */
export function useErc721UriStorageEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc721UriStorageABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721UriStorageABI,
    ...config,
  } as UseContractEventConfig<typeof erc721UriStorageABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721UriStorageABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721UriStorageApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721UriStorageABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721UriStorageABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc721UriStorageABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721UriStorageABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721UriStorageApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721UriStorageABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721UriStorageABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof erc721UriStorageABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721UriStorageABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721UriStorageTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721UriStorageABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721UriStorageABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc721UriStorageABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function useIerc721Metadata(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ierc721MetadataABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function useIerc721MetadataRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    ...config,
  } as UseContractReadConfig<typeof ierc721MetadataABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc721MetadataBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, 'balanceOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof ierc721MetadataABI, 'balanceOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"getApproved"`.
 */
export function useIerc721MetadataGetApproved(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, 'getApproved'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof ierc721MetadataABI, 'getApproved'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc721MetadataIsApprovedForAll(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, 'isApprovedForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof ierc721MetadataABI, 'isApprovedForAll'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"name"`.
 */
export function useIerc721MetadataName(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, 'name'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof ierc721MetadataABI, 'name'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useIerc721MetadataOwnerOf(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, 'ownerOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof ierc721MetadataABI, 'ownerOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc721MetadataSupportsInterface(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, 'supportsInterface'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof ierc721MetadataABI, 'supportsInterface'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"symbol"`.
 */
export function useIerc721MetadataSymbol(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, 'symbol'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof ierc721MetadataABI, 'symbol'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useIerc721MetadataTokenUri(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, 'tokenURI'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof ierc721MetadataABI, 'tokenURI'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function useIerc721MetadataWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721MetadataABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof ierc721MetadataABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721MetadataABI, TFunctionName>({
    abi: ierc721MetadataABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc721MetadataApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721MetadataABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof ierc721MetadataABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721MetadataABI, 'approve'>({
    abi: ierc721MetadataABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc721MetadataSafeTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721MetadataABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc721MetadataABI,
        'safeTransferFrom'
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721MetadataABI, 'safeTransferFrom'>(
    {
      abi: ierc721MetadataABI,
      functionName: 'safeTransferFrom',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc721MetadataSetApprovalForAll<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721MetadataABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc721MetadataABI,
        'setApprovalForAll'
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc721MetadataABI,
    'setApprovalForAll'
  >({
    abi: ierc721MetadataABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc721MetadataTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721MetadataABI,
          'transferFrom'
        >['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc721MetadataABI,
        'transferFrom'
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721MetadataABI, 'transferFrom'>({
    abi: ierc721MetadataABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function usePrepareIerc721MetadataWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721MetadataABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721MetadataABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc721MetadataApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc721MetadataSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721MetadataABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721MetadataABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc721MetadataSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721MetadataABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721MetadataABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc721MetadataTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function useIerc721MetadataEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc721MetadataABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721MetadataABI,
    ...config,
  } as UseContractEventConfig<typeof ierc721MetadataABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc721MetadataApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721MetadataABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721MetadataABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc721MetadataABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc721MetadataApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721MetadataABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721MetadataABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof ierc721MetadataABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc721MetadataTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721MetadataABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721MetadataABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc721MetadataABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc721BurnableUpgradeableABI}__.
 */
export function useErc721BurnableUpgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: erc721BurnableUpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableUpgradeableABI}__.
 */
export function useErc721BurnableUpgradeableRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableUpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BurnableUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof erc721BurnableUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableUpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc721BurnableUpgradeableBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableUpgradeableABI, 'balanceOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BurnableUpgradeableABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc721BurnableUpgradeableABI, 'balanceOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableUpgradeableABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc721BurnableUpgradeableGetApproved(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableUpgradeableABI, 'getApproved'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BurnableUpgradeableABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<
    typeof erc721BurnableUpgradeableABI,
    'getApproved'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableUpgradeableABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc721BurnableUpgradeableIsApprovedForAll(
  config: Omit<
    UseContractReadConfig<
      typeof erc721BurnableUpgradeableABI,
      'isApprovedForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BurnableUpgradeableABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof erc721BurnableUpgradeableABI,
    'isApprovedForAll'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableUpgradeableABI}__ and `functionName` set to `"name"`.
 */
export function useErc721BurnableUpgradeableName(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableUpgradeableABI, 'name'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BurnableUpgradeableABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc721BurnableUpgradeableABI, 'name'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableUpgradeableABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc721BurnableUpgradeableOwnerOf(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableUpgradeableABI, 'ownerOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BurnableUpgradeableABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof erc721BurnableUpgradeableABI, 'ownerOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableUpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc721BurnableUpgradeableSupportsInterface(
  config: Omit<
    UseContractReadConfig<
      typeof erc721BurnableUpgradeableABI,
      'supportsInterface'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BurnableUpgradeableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof erc721BurnableUpgradeableABI,
    'supportsInterface'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableUpgradeableABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc721BurnableUpgradeableSymbol(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableUpgradeableABI, 'symbol'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BurnableUpgradeableABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc721BurnableUpgradeableABI, 'symbol'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableUpgradeableABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc721BurnableUpgradeableTokenUri(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableUpgradeableABI, 'tokenURI'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BurnableUpgradeableABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof erc721BurnableUpgradeableABI, 'tokenURI'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BurnableUpgradeableABI}__.
 */
export function useErc721BurnableUpgradeableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721BurnableUpgradeableABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof erc721BurnableUpgradeableABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc721BurnableUpgradeableABI,
    TFunctionName
  >({ abi: erc721BurnableUpgradeableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BurnableUpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721BurnableUpgradeableApprove<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721BurnableUpgradeableABI,
          'approve'
        >['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<
        TMode,
        typeof erc721BurnableUpgradeableABI,
        'approve'
      > & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc721BurnableUpgradeableABI,
    'approve'
  >({
    abi: erc721BurnableUpgradeableABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BurnableUpgradeableABI}__ and `functionName` set to `"burn"`.
 */
export function useErc721BurnableUpgradeableBurn<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721BurnableUpgradeableABI,
          'burn'
        >['abi'],
        'burn'
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<
        TMode,
        typeof erc721BurnableUpgradeableABI,
        'burn'
      > & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721BurnableUpgradeableABI, 'burn'>({
    abi: erc721BurnableUpgradeableABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BurnableUpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721BurnableUpgradeableSafeTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721BurnableUpgradeableABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof erc721BurnableUpgradeableABI,
        'safeTransferFrom'
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc721BurnableUpgradeableABI,
    'safeTransferFrom'
  >({
    abi: erc721BurnableUpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BurnableUpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721BurnableUpgradeableSetApprovalForAll<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721BurnableUpgradeableABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        TMode,
        typeof erc721BurnableUpgradeableABI,
        'setApprovalForAll'
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc721BurnableUpgradeableABI,
    'setApprovalForAll'
  >({
    abi: erc721BurnableUpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BurnableUpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721BurnableUpgradeableTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721BurnableUpgradeableABI,
          'transferFrom'
        >['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof erc721BurnableUpgradeableABI,
        'transferFrom'
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc721BurnableUpgradeableABI,
    'transferFrom'
  >({
    abi: erc721BurnableUpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BurnableUpgradeableABI}__.
 */
export function usePrepareErc721BurnableUpgradeableWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721BurnableUpgradeableABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721BurnableUpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721BurnableUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BurnableUpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721BurnableUpgradeableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721BurnableUpgradeableABI,
      'approve'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721BurnableUpgradeableABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721BurnableUpgradeableABI,
    'approve'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BurnableUpgradeableABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareErc721BurnableUpgradeableBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721BurnableUpgradeableABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721BurnableUpgradeableABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721BurnableUpgradeableABI,
    'burn'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BurnableUpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721BurnableUpgradeableSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721BurnableUpgradeableABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721BurnableUpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721BurnableUpgradeableABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BurnableUpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721BurnableUpgradeableSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721BurnableUpgradeableABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721BurnableUpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721BurnableUpgradeableABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BurnableUpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721BurnableUpgradeableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721BurnableUpgradeableABI,
      'transferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721BurnableUpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721BurnableUpgradeableABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721BurnableUpgradeableABI}__.
 */
export function useErc721BurnableUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc721BurnableUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721BurnableUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof erc721BurnableUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721BurnableUpgradeableABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721BurnableUpgradeableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721BurnableUpgradeableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721BurnableUpgradeableABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc721BurnableUpgradeableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721BurnableUpgradeableABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721BurnableUpgradeableApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<
      typeof erc721BurnableUpgradeableABI,
      'ApprovalForAll'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721BurnableUpgradeableABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<
    typeof erc721BurnableUpgradeableABI,
    'ApprovalForAll'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721BurnableUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc721BurnableUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721BurnableUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721BurnableUpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<
    typeof erc721BurnableUpgradeableABI,
    'Initialized'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721BurnableUpgradeableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721BurnableUpgradeableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721BurnableUpgradeableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721BurnableUpgradeableABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc721BurnableUpgradeableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__.
 */
export function useErc721UriStorageUpgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: erc721UriStorageUpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__.
 */
export function useErc721UriStorageUpgradeableRead<
  TFunctionName extends string,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721UriStorageUpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UriStorageUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof erc721UriStorageUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc721UriStorageUpgradeableBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof erc721UriStorageUpgradeableABI, 'balanceOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UriStorageUpgradeableABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof erc721UriStorageUpgradeableABI,
    'balanceOf'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc721UriStorageUpgradeableGetApproved(
  config: Omit<
    UseContractReadConfig<typeof erc721UriStorageUpgradeableABI, 'getApproved'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UriStorageUpgradeableABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<
    typeof erc721UriStorageUpgradeableABI,
    'getApproved'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc721UriStorageUpgradeableIsApprovedForAll(
  config: Omit<
    UseContractReadConfig<
      typeof erc721UriStorageUpgradeableABI,
      'isApprovedForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UriStorageUpgradeableABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof erc721UriStorageUpgradeableABI,
    'isApprovedForAll'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `functionName` set to `"name"`.
 */
export function useErc721UriStorageUpgradeableName(
  config: Omit<
    UseContractReadConfig<typeof erc721UriStorageUpgradeableABI, 'name'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UriStorageUpgradeableABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc721UriStorageUpgradeableABI, 'name'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc721UriStorageUpgradeableOwnerOf(
  config: Omit<
    UseContractReadConfig<typeof erc721UriStorageUpgradeableABI, 'ownerOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UriStorageUpgradeableABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof erc721UriStorageUpgradeableABI, 'ownerOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc721UriStorageUpgradeableSupportsInterface(
  config: Omit<
    UseContractReadConfig<
      typeof erc721UriStorageUpgradeableABI,
      'supportsInterface'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UriStorageUpgradeableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof erc721UriStorageUpgradeableABI,
    'supportsInterface'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc721UriStorageUpgradeableSymbol(
  config: Omit<
    UseContractReadConfig<typeof erc721UriStorageUpgradeableABI, 'symbol'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UriStorageUpgradeableABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc721UriStorageUpgradeableABI, 'symbol'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc721UriStorageUpgradeableTokenUri(
  config: Omit<
    UseContractReadConfig<typeof erc721UriStorageUpgradeableABI, 'tokenURI'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UriStorageUpgradeableABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof erc721UriStorageUpgradeableABI, 'tokenURI'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__.
 */
export function useErc721UriStorageUpgradeableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721UriStorageUpgradeableABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof erc721UriStorageUpgradeableABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc721UriStorageUpgradeableABI,
    TFunctionName
  >({ abi: erc721UriStorageUpgradeableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721UriStorageUpgradeableApprove<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721UriStorageUpgradeableABI,
          'approve'
        >['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<
        TMode,
        typeof erc721UriStorageUpgradeableABI,
        'approve'
      > & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc721UriStorageUpgradeableABI,
    'approve'
  >({
    abi: erc721UriStorageUpgradeableABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721UriStorageUpgradeableSafeTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721UriStorageUpgradeableABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof erc721UriStorageUpgradeableABI,
        'safeTransferFrom'
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc721UriStorageUpgradeableABI,
    'safeTransferFrom'
  >({
    abi: erc721UriStorageUpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721UriStorageUpgradeableSetApprovalForAll<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721UriStorageUpgradeableABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        TMode,
        typeof erc721UriStorageUpgradeableABI,
        'setApprovalForAll'
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc721UriStorageUpgradeableABI,
    'setApprovalForAll'
  >({
    abi: erc721UriStorageUpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721UriStorageUpgradeableTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721UriStorageUpgradeableABI,
          'transferFrom'
        >['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof erc721UriStorageUpgradeableABI,
        'transferFrom'
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc721UriStorageUpgradeableABI,
    'transferFrom'
  >({
    abi: erc721UriStorageUpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__.
 */
export function usePrepareErc721UriStorageUpgradeableWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721UriStorageUpgradeableABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721UriStorageUpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721UriStorageUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721UriStorageUpgradeableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721UriStorageUpgradeableABI,
      'approve'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721UriStorageUpgradeableABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721UriStorageUpgradeableABI,
    'approve'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721UriStorageUpgradeableSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721UriStorageUpgradeableABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721UriStorageUpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721UriStorageUpgradeableABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721UriStorageUpgradeableSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721UriStorageUpgradeableABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721UriStorageUpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721UriStorageUpgradeableABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721UriStorageUpgradeableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721UriStorageUpgradeableABI,
      'transferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721UriStorageUpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721UriStorageUpgradeableABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__.
 */
export function useErc721UriStorageUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc721UriStorageUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721UriStorageUpgradeableABI,
    ...config,
  } as UseContractEventConfig<
    typeof erc721UriStorageUpgradeableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721UriStorageUpgradeableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721UriStorageUpgradeableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721UriStorageUpgradeableABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<
    typeof erc721UriStorageUpgradeableABI,
    'Approval'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721UriStorageUpgradeableApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<
      typeof erc721UriStorageUpgradeableABI,
      'ApprovalForAll'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721UriStorageUpgradeableABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<
    typeof erc721UriStorageUpgradeableABI,
    'ApprovalForAll'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc721UriStorageUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof erc721UriStorageUpgradeableABI,
      'Initialized'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721UriStorageUpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<
    typeof erc721UriStorageUpgradeableABI,
    'Initialized'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721UriStorageUpgradeableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721UriStorageUpgradeableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721UriStorageUpgradeableABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<
    typeof erc721UriStorageUpgradeableABI,
    'Transfer'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__.
 */
export function useIerc721MetadataUpgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ierc721MetadataUpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__.
 */
export function useIerc721MetadataUpgradeableRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataUpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc721MetadataUpgradeableBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataUpgradeableABI, 'balanceOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof ierc721MetadataUpgradeableABI, 'balanceOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"getApproved"`.
 */
export function useIerc721MetadataUpgradeableGetApproved(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataUpgradeableABI, 'getApproved'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataUpgradeableABI,
    'getApproved'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc721MetadataUpgradeableIsApprovedForAll(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataUpgradeableABI,
      'isApprovedForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataUpgradeableABI,
    'isApprovedForAll'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"name"`.
 */
export function useIerc721MetadataUpgradeableName(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataUpgradeableABI, 'name'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof ierc721MetadataUpgradeableABI, 'name'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useIerc721MetadataUpgradeableOwnerOf(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataUpgradeableABI, 'ownerOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof ierc721MetadataUpgradeableABI, 'ownerOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc721MetadataUpgradeableSupportsInterface(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataUpgradeableABI,
      'supportsInterface'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataUpgradeableABI,
    'supportsInterface'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"symbol"`.
 */
export function useIerc721MetadataUpgradeableSymbol(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataUpgradeableABI, 'symbol'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof ierc721MetadataUpgradeableABI, 'symbol'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useIerc721MetadataUpgradeableTokenUri(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataUpgradeableABI, 'tokenURI'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof ierc721MetadataUpgradeableABI, 'tokenURI'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__.
 */
export function useIerc721MetadataUpgradeableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721MetadataUpgradeableABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof ierc721MetadataUpgradeableABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc721MetadataUpgradeableABI,
    TFunctionName
  >({ abi: ierc721MetadataUpgradeableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc721MetadataUpgradeableApprove<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721MetadataUpgradeableABI,
          'approve'
        >['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc721MetadataUpgradeableABI,
        'approve'
      > & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc721MetadataUpgradeableABI,
    'approve'
  >({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc721MetadataUpgradeableSafeTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721MetadataUpgradeableABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc721MetadataUpgradeableABI,
        'safeTransferFrom'
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc721MetadataUpgradeableABI,
    'safeTransferFrom'
  >({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc721MetadataUpgradeableSetApprovalForAll<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721MetadataUpgradeableABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc721MetadataUpgradeableABI,
        'setApprovalForAll'
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc721MetadataUpgradeableABI,
    'setApprovalForAll'
  >({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc721MetadataUpgradeableTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721MetadataUpgradeableABI,
          'transferFrom'
        >['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc721MetadataUpgradeableABI,
        'transferFrom'
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc721MetadataUpgradeableABI,
    'transferFrom'
  >({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__.
 */
export function usePrepareIerc721MetadataUpgradeableWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721MetadataUpgradeableABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataUpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721MetadataUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc721MetadataUpgradeableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721MetadataUpgradeableABI,
      'approve'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721MetadataUpgradeableABI,
    'approve'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc721MetadataUpgradeableSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721MetadataUpgradeableABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721MetadataUpgradeableABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc721MetadataUpgradeableSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721MetadataUpgradeableABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721MetadataUpgradeableABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc721MetadataUpgradeableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721MetadataUpgradeableABI,
      'transferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721MetadataUpgradeableABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__.
 */
export function useIerc721MetadataUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc721MetadataUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721MetadataUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof ierc721MetadataUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc721MetadataUpgradeableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721MetadataUpgradeableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721MetadataUpgradeableABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc721MetadataUpgradeableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc721MetadataUpgradeableApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<
      typeof ierc721MetadataUpgradeableABI,
      'ApprovalForAll'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721MetadataUpgradeableABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<
    typeof ierc721MetadataUpgradeableABI,
    'ApprovalForAll'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc721MetadataUpgradeableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721MetadataUpgradeableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721MetadataUpgradeableABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc721MetadataUpgradeableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc721HolderUpgradeableABI}__.
 */
export function useErc721HolderUpgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: erc721HolderUpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721HolderUpgradeableABI}__.
 */
export function useErc721HolderUpgradeableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721HolderUpgradeableABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof erc721HolderUpgradeableABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc721HolderUpgradeableABI,
    TFunctionName
  >({ abi: erc721HolderUpgradeableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721HolderUpgradeableABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function useErc721HolderUpgradeableOnErc721Received<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721HolderUpgradeableABI,
          'onERC721Received'
        >['abi'],
        'onERC721Received'
      > & { functionName?: 'onERC721Received' }
    : UseContractWriteConfig<
        TMode,
        typeof erc721HolderUpgradeableABI,
        'onERC721Received'
      > & {
        abi?: never
        functionName?: 'onERC721Received'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc721HolderUpgradeableABI,
    'onERC721Received'
  >({
    abi: erc721HolderUpgradeableABI,
    functionName: 'onERC721Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721HolderUpgradeableABI}__.
 */
export function usePrepareErc721HolderUpgradeableWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721HolderUpgradeableABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721HolderUpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721HolderUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721HolderUpgradeableABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function usePrepareErc721HolderUpgradeableOnErc721Received(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721HolderUpgradeableABI,
      'onERC721Received'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721HolderUpgradeableABI,
    functionName: 'onERC721Received',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721HolderUpgradeableABI,
    'onERC721Received'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721HolderUpgradeableABI}__.
 */
export function useErc721HolderUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc721HolderUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721HolderUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof erc721HolderUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721HolderUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc721HolderUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721HolderUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721HolderUpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof erc721HolderUpgradeableABI, 'Initialized'>)
}
