@compiler >= 6

include "Option.aes"
include "../core/IAEX141.aes"

contract NFTReceiverExample =

    record state =
        { contract_to_tokenowner: map(IAEX141, map(int, address)) }

    stateful entrypoint init() =
        { contract_to_tokenowner = {} }

    entrypoint get_contract_to_tokenowner() : map(IAEX141, map(int, address)) =
        state.contract_to_tokenowner

    entrypoint get_nft_owner(nft_contract: IAEX141, token_id: int) : option(address) =
        let token_to_owner = Option.force_msg(Map.lookup(nft_contract, state.contract_to_tokenowner), "UNKNOWN_TOKEN_CONTRACT")
        Map.lookup(token_id, token_to_owner)

    stateful entrypoint claim_nft(nft_contract: IAEX141, token_id: int) =
        let token_to_owner = Option.force_msg(
                                Map.lookup(nft_contract,
                                    state.contract_to_tokenowner), "UNKNOWN_TOKEN_CONTRACT")
        let owner = Option.force_msg(
                        Map.lookup(token_id,
                            token_to_owner), "TOKEN_ID_NOT_PRESENT")
        require(owner == Call.caller, "CLAIM_DENIED_NOT_OWNER")
        put(state{ contract_to_tokenowner[nft_contract] @token_to_owner = Map.delete(token_id, token_to_owner) })
        nft_contract.transfer(Call.caller, token_id, None)

    stateful entrypoint transfer_nft_to_contract(nft_contract: IAEX141, token_id: int) =
        let from = Option.force_msg(nft_contract.owner(token_id), "TOKEN_ID_NOT_EXISTS")
        nft_contract.transfer_to_contract(token_id)
        put(state{ contract_to_tokenowner[nft_contract = {}] @token_to_owner =
                token_to_owner{[token_id] = from} })

    stateful entrypoint on_aex141_received(from: option(address), token_id: int, data: option(string)) : bool =
        switch(data)
            None =>
                put(state{ contract_to_tokenowner[Address.to_contract(Call.caller) = {}] @token_to_owner =
                        token_to_owner{[token_id] = Option.force(from)} })
                true
            Some(_) => false